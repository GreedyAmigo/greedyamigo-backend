type AnonymousUser {
    id: ID! @unique
    firstName: String!
    lastName: String!
    user: User
}

type User {
    id: ID! @unique
    firstName: String!
    lastName: String!
    password: String!
    email: String! @unique
    things: [Thing!]
    moneyLendingsReceiver: [MoneyLending!] @relation(name: "MoneyLendingsReceiver")
    thingLendingsReceiver: [ThingLending!] @relation(name: "ThingLendingsReceiver")
    moneyLendingsDebtor: [MoneyLending!] @relation(name: "MoneyLendingsDebtor")
    thingLendingsDebtor: [ThingLending!] @relation(name: "ThingLendingsDebtor")
}

type Thing {
    id: ID! @unique
    label: String! @unique
}

type Reminder {
    id: ID! @unique
    dateTime: DateTime
}

interface Lending {
    id: ID! @unique
    dueDate: DateTime
    description: String!
    cleared: Boolean! @defaultValue(value: "false")
    createdAt: DateTime!
    updatedAt: DateTime!
    reminder: [Reminder!]
}

type MoneyLending implements Lending {
    amount: Int!
    currency: Currency!
}

type ThingLending implements Lending {
    thing: Thing!
    emoji: String!
}

type Currency {
    id: ID! @unique
    symbol: String!
    Name: String!
    Abbreviation: String! @unique
}