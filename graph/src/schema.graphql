scalar DateTime
directive @length(min: Int = 0, max: Int = 255) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type AuthPayload {
    token: String!
    user: User!
}

type AnonymousUser {
    id: ID!
    firstName: String! @length(min: 2, max: 50)
    lastName: String! @length(min: 2, max: 50)
    user: User!
}

type User {
    id: ID!
    firstName: String! @length(min: 2, max: 50)
    lastName: String! @length(min: 2, max: 50)
    email: String!
    things: [Thing!]!
    anonymousUsers: [AnonymousUser!]!
    moneyLendings: [MoneyLending!]!
    thingLendings: [ThingLending!]!
}

type Thing {
    id: ID!
    label: String!
    user: User!
}

interface Lending {
    dueDate: DateTime
    description: String!
    cleared: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
    owner: User!
    participant :AnonymousUser!
}

type MoneyLending implements Lending {
    id: ID!
    amount: Float!
    currency: Currency!

    owner: User!
    participant :AnonymousUser!
    dueDate: DateTime
    description: String!
    cleared: Boolean!
    isBorrowed: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type ThingLending implements Lending {
    id: ID!
    thing: Thing!
    emoji: String!

    owner: User!
    participant :AnonymousUser!
    dueDate: DateTime
    description: String!
    cleared: Boolean!
    isBorrowed: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Currency {
    id: ID!
    symbol: String!
    name: String!
    abbreviation: String! @length(min: 3, max: 3)
}

type Query {
    me: User!
    login(email: String!, password: String!): AuthPayload!
    moneyLendings: [MoneyLending!]!
    thingLendings: [ThingLending!]!
    anonymousUsers: [AnonymousUser!]!
    things: [Thing!]!
    currency(abbreviation: String!): Currency!
    currencies: [Currency!]!
}

type Mutation {
    signup(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload!
    createAnonymousUser(firstName: String!, lastName: String!): AnonymousUser!
    createThing(label: String!): Thing!
    createMoneyLending(dueDate: DateTime, description: String!, participantId: ID!, isBorrowed: Boolean, amount: Float!, currencyId: ID!): MoneyLending!
    createThingLending(dueDate: DateTime, description: String!, participantId: ID!, isBorrowed: Boolean, emoji: String, thingId: ID!): ThingLending!
}