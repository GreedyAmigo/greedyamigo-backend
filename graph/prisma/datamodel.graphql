type AnonymousUser {
    id: ID! @unique
    firstName: String!
    lastName: String!
    user: User!
}

type User {
    id: ID! @unique
    email: String! @unique
    firstName: String!
    lastName: String!
    password: String!
    things: [Thing!]!
    anonymousUsers: [AnonymousUser!]!
    moneyLendings: [MoneyLending!]!
    thingLendings: [ThingLending!]!
}

type Thing {
    id: ID! @unique
    label: String! @unique
    user: User!
}

interface Lending {
    dueDate: DateTime
    description: String!
    cleared: Boolean! @default(value: "false")
    createdAt: DateTime!
    updatedAt: DateTime!
}

type MoneyLending implements Lending {
    id: ID! @unique
    amount: Float!
    currency: Currency!
    owner: User!
    participant :AnonymousUser!

    dueDate: DateTime
    description: String!
    cleared: Boolean! @default(value: "false")
    isBorrowed: Boolean! @default(value: "true")
    createdAt: DateTime!
    updatedAt: DateTime!
}

type ThingLending implements Lending {
    id: ID! @unique
    thing: Thing!
    emoji: String!
    owner: User!
    participant :AnonymousUser!

    dueDate: DateTime
    description: String!
    cleared: Boolean! @default(value: "false")
    isBorrowed: Boolean! @default(value: "true")
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Currency {
    id: ID! @unique
    symbol: String!
    name: String!
    abbreviation: String! @unique
}